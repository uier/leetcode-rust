fn main() {
    let tests = [
        vec![4, 2, 5, 3],
        vec![1, 2, 3, 5, 6],
        vec![1, 10, 100, 1000],
        vec![8, 5, 9, 9, 8, 4],
        vec![41, 33, 29, 33, 35, 26, 47, 24, 18, 28],
        vec![
            2283, 2381, 2203, 2294, 2201, 2286, 2083, 2351, 2150, 2100, 2122, 2126, 2232, 2334,
            2370, 2340, 2263, 2357, 2261, 2309, 2364, 2139, 2096, 2258, 2078, 2342, 2385, 2143,
            2305, 2294, 2210, 2381, 2089, 2271, 2256, 2062, 2361, 2387, 2195, 2036, 2232, 2185,
            2142, 2260, 2138, 2085, 2120, 2210, 2300, 2411, 2145, 2071, 2098, 2255, 2225, 2061,
            2076, 2404, 2071, 2125, 2084, 2317, 2197, 2091, 2028, 2317, 2148, 2325, 2390, 2313,
            2406, 2103, 2264, 2099, 2084, 2025, 2244, 2258, 2261, 2339, 2223, 2114, 2366, 2185,
            2140, 2282, 2190, 2298, 2232, 2371, 2248, 2034, 2051, 2273, 2171, 2192, 2362, 2230,
            2129, 2341, 2359, 2210, 2301, 2288, 2083, 2294, 2331, 2258, 2081, 2049, 2120, 2146,
            2392, 2396, 2340, 2057, 2394, 2142, 2352, 2328, 2389, 2212, 2357, 2119, 2068, 2029,
            2344, 2357, 2403, 2199, 2400, 2389, 2085, 2056, 2396, 2252, 2087, 2160, 2404, 2209,
            2208, 2317, 2345, 2402, 2280, 2257, 2109, 2115, 2071, 2277, 2397, 2350, 2390, 2218,
            2356, 2176, 2080, 2146, 2151, 2301, 2070, 2402, 2310, 2233, 2178, 2094, 2193, 2375,
            2279, 2126, 2405, 2331, 2045, 2069, 2092, 2211, 2196, 2235, 2291, 2039, 2089, 2164,
            2063, 2272, 2349, 2210, 2102, 2300, 2387, 2375, 2389, 2308, 2191, 2119, 2383, 2267,
            2093, 2027, 2180, 2088, 2393, 2132, 2118, 2126, 2299, 2073, 2364, 2341, 2403, 2228,
            2384, 2044, 2269, 2035, 2353, 2219, 2100, 2339, 2283, 2030, 2067, 2201, 2224, 2226,
            2136, 2343, 2341, 2365, 2185, 2273, 2232, 2258, 2049, 2227, 2204, 2104, 2045, 2168,
            2079, 2030, 2303, 2181, 2185, 2333, 2372, 2260, 2129, 2177, 2079, 2095, 2106, 2101,
            2141, 2164, 2030, 2161, 2335, 2277, 2339, 2261, 2246, 2410, 2172, 2232, 2148, 2317,
            2132, 2196, 2338, 2387, 2372, 2161, 2116, 2162, 2025, 2369, 2343, 2262, 2407, 2352,
            2034, 2043, 2357, 2410, 2257, 2204, 2403, 2361, 2407, 2115, 2183, 2363, 2414, 2368,
            2325, 2358, 2319, 2113, 2084, 2271, 2400, 2344, 2393, 2104, 2371, 2400, 2144, 2311,
            2091, 2174, 2282, 2292, 2146, 2340, 2238, 2383, 2178, 2064, 2062, 2182, 2315, 2046,
            2311, 2270, 2257, 2325, 2063, 2215, 2241, 2038, 2028, 2139, 2210, 2033, 2109, 2205,
            2134, 2215, 2117, 2230, 2187, 2117, 2266, 2180, 2388, 2182, 2040, 2239, 2234, 2263,
            2201, 2160, 2211, 2355, 2238, 2107, 2240, 2394, 2190, 2098, 2332, 2366, 2066, 2130,
            2359, 2404, 2131, 2132, 2315, 2057, 2125, 2318,
        ],
    ];
    let answers = [0, 1, 3, 2, 5, 139];
    for (test, expected_answer) in tests.into_iter().zip(answers) {
        let answer = Solution::min_operations(test);
        assert_eq!(answer, expected_answer);
    }
}
struct Solution;
impl Solution {
    pub fn min_operations(nums: Vec<i32>) -> i32 {
        let mut nums = nums;
        let n = nums.len() as i32;
        nums.sort();
        let mut dup = vec![0; n as usize + 1];
        for i in 1..(n as usize) {
            dup[i + 1] = dup[i];
            if nums[i] == nums[i - 1] {
                dup[i + 1] += 1;
            }
        }
        let mut ans = n - 1;
        for (i, ni) in nums.iter().enumerate() {
            match nums.binary_search_by(|v| match v.cmp(&(ni + n)) {
                std::cmp::Ordering::Equal => std::cmp::Ordering::Greater,
                ord => ord,
            }) {
                Ok(v) | Err(v) => {
                    ans = ans.min(n - ((v - i) as i32) + dup[v] - dup[i]);
                }
            }
        }
        ans
    }
}
